// <auto-generated />
using System;
using Event.Data.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Event.Data.Migrations
{
    [DbContext(typeof(Net1704_221_3_EventContext))]
    partial class Net1704_221_3_EventContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Event.Data.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CustomerId")
                        .HasName("PK__Customer__A4AE64D89C42FA7D");

                    b.HasIndex(new[] { "Phone" }, "UQ__Customer__5C7E359EE18AC2ED")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex(new[] { "CustomerName" }, "UQ__Customer__7A22C6EAAADBEFE9")
                        .IsUnique()
                        .HasFilter("[CustomerName] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Customer__A9D10534410016DD")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Event.Data.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventDescription")
                        .HasColumnType("text");

                    b.Property<string>("EventName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NumberTickets")
                        .HasColumnType("int");

                    b.Property<string>("Sponsor")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubjectCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("EventId")
                        .HasName("PK__Events__7944C810462064C5");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Event.Data.Models.EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"));

                    b.Property<string>("EventTypeName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("EventTypeId")
                        .HasName("PK__EventTyp__A9216B3FFF1AAC9E");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("Event.Data.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly?>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketQuantity")
                        .HasColumnType("int");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A3840DEE2BC");

                    b.HasIndex("RegistrationId");

                    b.HasIndex("TicketId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Event.Data.Models.Registration", b =>
                {
                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<string>("AttendeeEmail")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("Checkin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CheckinTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FeePaid")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ParticipantName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ParticipantType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<string>("RegistrationPhone")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("VistorCode")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("RegistrationId")
                        .HasName("PK__Registra__6EF58810084A83B2");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EventId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Event.Data.Models.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("TicketType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TicketId")
                        .HasName("PK__Tickets__712CC607489EFF87");

                    b.HasIndex("EventId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Event.Data.Models.Event", b =>
                {
                    b.HasOne("Event.Data.Models.EventType", "EventType")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .HasConstraintName("FK__Events__EventTyp__440B1D61");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("Event.Data.Models.Payment", b =>
                {
                    b.HasOne("Event.Data.Models.Registration", "Registration")
                        .WithMany("Payments")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK__Payments__Regist__44FF419A");

                    b.HasOne("Event.Data.Models.Ticket", "Ticket")
                        .WithMany("Payments")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__Payments__Ticket__45F365D3");

                    b.Navigation("Registration");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("Event.Data.Models.Registration", b =>
                {
                    b.HasOne("Event.Data.Models.Customer", "Customer")
                        .WithMany("Registrations")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Registrat__Custo__46E78A0C");

                    b.HasOne("Event.Data.Models.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__Registrat__Event__47DBAE45");

                    b.Navigation("Customer");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Event.Data.Models.Ticket", b =>
                {
                    b.HasOne("Event.Data.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__Tickets__EventId__48CFD27E");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Event.Data.Models.Customer", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Event.Data.Models.Event", b =>
                {
                    b.Navigation("Registrations");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Event.Data.Models.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Event.Data.Models.Registration", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Event.Data.Models.Ticket", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
